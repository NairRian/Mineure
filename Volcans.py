import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math


# DATA
# Chemin du fichier CSV local
csv_path = "./database.csv"

# Lecture du fichier CSV avec pandas
df = pd.read_csv(csv_path)

###################################################################

# configurer la page
apptitle = "Volcans de l'Holoc√®ne - GP5"
st.set_page_config(page_title=apptitle, page_icon="üåã")

st.title("Les volcans de l'Holoc√®ne")

st.markdown("""
 * Utiliser le menu pour choisir ce que vous souhaitez afficher
 * Ci-dessous parait vos choix
""")

###################################################################

# configuration de la sidebar
st.sidebar.title("## Choix des graphiques ou map que vous souhaitez afficher : ")

###################################################################

# PARTIE RAPH
st.sidebar.subheader("Lien entre les types de roche, de tectonique et d'√©ruption")

# ANALYSE SELON TYPE DE ROCHES, D'ERUPTION ET DE TECTONIQUE
# r√©duire l'excel aux colonnes qui nous int√©ressent
data_infos = df[['Type', 'Dominant Rock Type', 'Tectonic Setting']]
# cr√©er une liste des √©l√©ments dans chaque colonne sans doublons
liste_type = list(set(data_infos['Type'].values))
liste_rock = list(set(data_infos['Dominant Rock Type'].values))
liste_tecto = list(set(data_infos['Tectonic Setting'].values))
# grouper la data par 'Dominant Rock Type' and 'Tectonic Setting', et compter les it√©rations de chaque 'Type', si un 'Type' n'est pas repr√©sent√©, indiquer 0
type_stats = (
    data_infos.groupby(['Dominant Rock Type', 'Tectonic Setting'])['Type']
    .value_counts() # compter les it√©rations
    .rename_axis(['Dominant Rock Type', 'Tectonic Setting', 'Type'])  # Ajouter les intitul√©s
    .unstack(fill_value=0)  # si valeur nulle
)
# afficher le graphique pour un bin√¥me
# demander le bin√¥me
rock_type = st.sidebar.selectbox("Quel type de roche ?", liste_rock)
tectonic_setting = st.sidebar.selectbox("Quel cas tectonique ?", liste_tecto)
raph = st.sidebar.checkbox("Afficher le graphique")

if raph :
    st.write(f"Vous avez choisi : {rock_type} et {tectonic_setting}")
    if (rock_type, tectonic_setting) in type_stats.index:
        type_counts = type_stats.loc[(rock_type, tectonic_setting)] # loc permet de cr√©er un tableau qui r√©pertorie les types de roche et leur it√©ration
        type_counts = type_counts[type_counts != 0] # suppression des valeurs = 0
        tot = sum(type_counts)
        for i in type_counts.index:  # Parcourir les index
            type_counts[i] = type_counts[i] / tot * 100
        
        st.write("Voici le graphique obtenu :")
    
        # Cr√©ation du graphique Matplotlib
        fig, ax = plt.subplots(figsize=(10, 6))
        type_counts.plot(kind='bar', ax=ax)
        ax.set_title(f"Distribution des types d'√©ruption pour la combinaison : {rock_type} & {tectonic_setting}")
        ax.set_xlabel("Type d'√©ruption")
        ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')
        ax.set_ylabel("Pourcentage de distribution")
        ax.set_ylim(0, 100)
        ax.set_yticks(range(0, 101, 10))
        plt.tight_layout()
        
        # Affichage dans Streamlit
        st.pyplot(fig)
    else:
        print(f"La combinaison indiqu√©e n'existe pas : {rock_type} & {tectonic_setting}")


# prompt: pour un type d'√©ruption 'Type', repr√©senter sur un graphique √† double entr√©es (en ordonn√©e les valeurs de 'Dominant Rock Type', en abscisse les valeurs de 'Tectonic Setting') la probabilit√© d'occurence
# en consid√©rant que la probabilit√© d'occurence est √©gale √† la probabilit√© que ce bin√¥me 'Dominant Rock Type' et 'Tectonic Setting' donne ce type d'√©ruption par rapport √† tous les types d'√©ruption qu'il peut former

# demander le type d'√©ruption
eruption_type = st.selectbox("Quel type d'√©ruption ?", liste_type)
st.write(f"Vous avez choisi : {eruption_type}")

if eruption_type in type_stats.columns:
    # Calculer les probabilit√©s pour le type d'√©ruption donn√©
    probabilities = type_stats[eruption_type] / type_stats.sum(axis=1) * 100

    st.write("Voici la heatmap obtenue :")
    # Cr√©ation de la heatmap
    probabilities_swap = probabilities.swaplevel()  # √âchanger abscisses et ordonn√©es
    heatmap_data = probabilities_swap.unstack()  # Transformer en DataFrame pour heatmap
    
    fig, ax = plt.subplots(figsize=(12, 8))
    sns.heatmap(
        heatmap_data,
        annot=True,
        cmap="viridis",
        fmt=".1f",
        ax=ax
    )
    ax.set_title(f"Probabilit√© d'occurrence de l'√©ruption : '{eruption_type}'")
    ax.set_xlabel("Situation tectonique")
    ax.set_ylabel("Type de roche")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    
    # Affichage dans Streamlit
    st.pyplot(fig)
else:
    print(f"Le type d'√©ruption '{eruption_type}' n'existe pas dans les donn√©es.")





#st.dataframe(df.style.highlight_max(axis=0)) surligne la valeur max de la colonne
#plot =df['alcohol']

#bot = st.checkbox("Afficher le graphique de la colonne alcohol : ")
#if bot :
#  st.write('Voici le graphique de la colonne alcohol : ')
#  st.line_chart(plot)
